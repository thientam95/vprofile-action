name: vprofile actions
on: workflow_dispatch
env:
  AWS_REGION: ap-southeast-1
  ECR_REPOSITORY: vprofileapp
  EKS_CLUSTER: kitops-eks
jobs:
  # Testing:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Code Checkout
  #       uses: actions/checkout@v4
      
  #     - name: Maven Test
  #       run: mvn test
      
  #     - name: Checkstyle
  #       run: mvn checkstyle:checkstyle
      
  #     - name: Set Java 11
  #       uses: actions/setup-java@v4
  #       with:
  #         distribution: 'temurin' # See 'Supported distributions' for available options
  #         java-version: '17'
      
  #     - name: Setup SonarQube
  #       uses: warchant/setup-sonar-scanner@v7
  #     # Run sonar-scanner
  #     - name: SonarQube Scan
  #       run: sonar-scanner
  #          -Dsonar.host.url=${{ secrets.SONAR_URL }}
  #          -Dsonar.login=${{ secrets.SONAR_TOKEN }}
  #          -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
  #          -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
  #          -Dsonar.sources=src/
  #          -Dsonar.junit.reportsPath=target/surefire-reports/
  #          -Dsonar.jacoco.reportsPath=target/jacoco.exec
  #          -Dsonar.java.checkstyle.reportsPaths=target/checkstyle-result.xml
  #          -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/

  #     - name: SonarQube Quality Gate check
  #       id: sonarqube-quality-gate-check
  #       uses: sonarsource/sonarqube-quality-gate-action@master
  #     # Force to fail step after specific time.
  #       timeout-minutes: 5
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #         SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  Build_and_Publish:
    needs: Testing
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v4

      - name: upload image to ECR
        uses: appleboy/docker-ecr-action@master
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          registry: ${{ secrets.REGISTRY }}
          repo: ${{ env.ECR_REPOSITORY }}
          region: ${{ env.AWS_REGION }}
          tags: latest, ${{ github.run_number }}
          daemon_off: false
          dockerfile: ./Dockerfile
          context: ./
  Deploy_to_EKS:
    needs: Build_and_Publish
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Get Kube config file
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }}

      - name: Login to ECR
        run: kubectl create secret docker-registry regcred2 --docker-server=${{ secrets.REGISTRY }} --docker-username=AWS --docker-password=$(aws ecr get-login-password)

      - name: Deploy Helm
        uses: bitovi/github-actions-deploy-eks-helm@v1.2.8
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          cluster-name: ${{ env.EKS_CLUSTER }}
          chart-path: helm/vprofilecharts
          namespace: default
          values: appimage=${{ secrets.REGISTRY }}/${{ env.ECR_REPOSITORY }}, apptag=${{ github.run_number }}
          name: vprofile-stack
            